{
   "info": {
      "_postman_id": "5ed2c31a-0db4-4d34-8c86-894e200924d2",
      "name": "Steemd Production Api",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
   },
   "item": [
      {
         "name": "steemd",
         "description": "Api For Steemd Daemon",
         "item": [
            {
               "name": "account_by_key_api.get_key_references (vector<public_key_type> key)",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_key_references\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : vector<public_key_type> key\n\nReturn : vector<set<string>> get_key_references\n\n"
               },
               "response": []
            },
            {
               "name": "block_api.get_block (uint32_t block_num) ",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_block\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Retrieve a full, signed block\n\nParams : uint32_t block_num block_num Height of the block to be returned\n\nReturn : optional<signed_block_api_obj> the referenced block, or null if no matching block was found\n\n"
               },
               "response": []
            },
            {
               "name": "block_api.get_block_header ( uint32_t block_num )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_block_header\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Retrieve a block header\n\nParams : uint32_t block_num Height of the block whose header should be returned\n\nReturn : optional<block_header> header of the referenced block, or null if no matching block was found\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_account_count ( )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_account_count\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get the total number of accounts registered with the blockchain\n\nParams : No params\n\nReturn : uint64_t\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_account_history (string account, uint64_t from, uint32_t limit)",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_account_history\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Account operations have sequence numbers from 0 to N where N is the most recent operation. This method\nreturns operations in the range [from-limit, from]\n\nParams : string account, uint64_t from - the absolute sequence number, -1 means most recent, limit is the number of operations before from, \nuint32_t limit - the maximum number of items that can be queried (0 to 1000], must be less than from\n\nReturn : map<uint32_t, applied_operation>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_account_references ( account_id_type account_id )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_account_references\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : account_id_type account_id\n\nReturn : vector<account_id_type> all accounts that referr to the key or account id in their owner or active authorities.\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_account_votes ( string voter )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_account_votes\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string voter\n\nReturn : vector<account_vote>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_accounts ( vector< string > names )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_accounts\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : vector< string > names\n\nReturn : vector< extended_account >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_active_votes ( string author, string permlink )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_active_votes\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : if permlink is \"\" then it will return all votes for author\n\nParams : string author, string permlink\n\nReturn : vector<vote_state>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_active_witnesses()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_active_witnesses\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : vector< account_name_type >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_chain_properties ( )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_chain_properties\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : chain_properties\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_comment_discussions_by_payout ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_comment_discussions_by_payout\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_config () ",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_config\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Retrieve compile-time constants\n\nParams : \n\nReturn : fc::variant_object \n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_content ( string author, string permlink )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_content\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string author, string permlink\n\nReturn : discussion\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_content_replies ( string parent, string parent_permlink )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_content_replies\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string parent, string parent_permlink\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_conversion_requests ( const string& account_name )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_conversion_requests\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const string& account_name\n\nReturn : vector<convert_request_api_obj>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_current_median_history_price()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_current_median_history_price\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : price\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_active ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_active\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_author_before_date ( string author, string start_permlink, time_point_sec before_date, uint32_t limit )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_author_before_date\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : This method is used to fetch all posts/comments by start_author that occur after before_date and start_permlink with up to limit being returned.\nIf start_permlink is empty then only before_date will be considered. If both are specified the eariler to the two metrics will be used. This\nshould allow easy pagination.\n\nParams : string author, string start_permlink, time_point_sec before_date, uint32_t limit\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_blog ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_blog\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_cashout",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_cashout ( const discussion_query& query )\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_children ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_children\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_comments ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_comments\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_created ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_created\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_feed ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_feed\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_hot ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_hot\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_promoted ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_promoted\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_trending ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_trending\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_discussions_by_votes ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussions_by_votes\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_dynamic_global_properties ( )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_dynamic_global_properties\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Retrieve the current @ref dynamic_global_property_object\n\nParams : \n\nReturn : dynamic_global_property_api_obj\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_escrow ( optional< escrow_api_obj > )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_escrow\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string from, uint32_t escrow_id\n\nReturn : optional< escrow_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_expiring_vesting_delegations ( string account, time_point_sec from, uint32_t limit = 100 )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_expiring_vesting_delegations\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account, time_point_sec from, uint32_t limit = 100\n\nReturn : vector< vesting_delegation_expiration_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_feed_history()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_feed_history\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : feed_history_api_obj\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_hardfork_version()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_hardfork_version\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : hardfork_version\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_next_scheduled_hardfork()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_next_scheduled_hardfork\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : scheduled_hardfork\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_open_orders ( string owner )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_open_orders\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string owner\n\nReturn : vector<extended_limit_order>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_ops_in_block ( uint32_t block_num, bool only_virtual )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get sequence of operations included/generated within a particular block\n\nParams : uint32_t block_num Height of the block whose generated virtual operations should be returned\nbool only_virtual Whether to only include virtual operations in returned results (default: true)\n\nReturn : vector<applied_operation> sequence of operations included/generated within the block\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_order_book ( uint32_t limit = 1000 )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_order_book\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Gets the current order book for STEEM:SBD market\n\nParams : uint32_t limit = 1000 limit Maximum number of orders for each side of the spread to return -- Must not exceed 1000\n\nReturn : order_book\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_owner_history ( string account )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_owner_history\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account\n\nReturn : vector< owner_authority_history_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_post_discussions_by_payout ( const discussion_query& query )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_post_discussions_by_payout\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const discussion_query& query\n\nReturn : vector<discussion>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_potential_signatures ( const signed_transaction& trx )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_potential_signatures\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : This method will return the set of all public keys that could possibly sign for a given transaction.  This call can\nbe used by wallets to filter their set of public keys to just the relevant subset prior to calling @ref get_required_signatures\nto get the minimum subset.\n\nParams : const signed_transaction& trx\n\nReturn : set<public_key_type>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_recovery_request( string account )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_recovery_request\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account\n\nReturn : optional< account_recovery_request_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_replies_by_last_update ( account_name_type start_author, string start_permlink, uint32_t limit )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_replies_by_last_update\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Return the active discussions with the highest cumulative pending payouts without respect to category, total\npending payout means the pending payout of all children as well.\n\nParams : account_name_type start_author, string start_permlink, uint32_t limit\n\nReturn : vector<discussion> \n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_required_signatures ( const signed_transaction& trx, const flat_set<public_key_type>& available_keys )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_required_signatures\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : This API will take a partially signed transaction and a set of public keys that the owner has the ability to sign for\nand return the minimal subset of public keys that should add signatures to the transaction.\n\nParams : const signed_transaction& trx, const flat_set<public_key_type>& available_keys \n\nReturn : set<public_key_type>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_reward_fund ( string name )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_reward_fund\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string name\n\nReturn : reward_fund_api_obj\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_savings_withdraw_from ( string account )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_savings_withdraw_from\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account\n\nReturn : vector< savings_withdraw_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_savings_withdraw_to ( string account )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_savings_withdraw_to\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account\n\nReturn : vector< savings_withdraw_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_state ( string path )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"state get_state\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : This API is a short-cut for returning all of the state required for a particular URL with a single query.\n\nParams : string path\n\nReturn : state\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_tags_used_by_author ( const string& author )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_tags_used_by_author\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const string& author\n\nReturn : vector<pair<string,uint32_t>>\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_transaction ( transaction_id_type trx_id )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_transaction\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : transaction_id_type trx_id\n\nReturn : annotated_signed_transaction\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_transaction_hex ( const signed_transaction& trx )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_transaction_hex\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get a hexdump of the serialized binary form of a transaction\n\nParams : const signed_transaction& trx\n\nReturn : std::string\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_vesting_delegations ( string account, string from, uint32_t limit = 100 )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_vesting_delegations\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account, string from, uint32_t limit = 100\n\nReturn : vector< vesting_delegation_api_obj >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_withdraw_routes ( string account, withdraw_route_type type = outgoing )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_withdraw_routes\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account, withdraw_route_type type = outgoing\n\nReturn : vector< withdraw_route >\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_witness_by_account ( string account_name )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_witness_by_account\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get the witness owned by a given account\n\nParams : string account_name account The name of the account whose witness should be retrieved\n\nReturn : fc::optional< witness_api_obj > The witness object, or null if the account does not have a witness\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_witness_count()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_witness_count\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get the total number of witnesses registered with the blockchain\n\nParams : \n\nReturn : uint64_t\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_witness_schedule()",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_witness_schedule\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : \n\nReturn : witness_schedule_api_obj\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_witnesses ( const vector<witness_id_type>& witness_ids )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_witnesses\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get a list of witnesses by ID. This function has semantics identical to @ref get_objects\n\nParams : const vector<witness_id_type>& witness_ids witness_ids IDs of the witnesses to retrieve\n\nReturn : vector<optional<witness_api_obj>> The witnesses corresponding to the provided IDs\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.get_witnesses_by_vote ( string from, uint32_t limit )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_witnesses_by_vote\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description :  This method is used to fetch witnesses with pagination \n\nParams : string from, uint32_t limit\n\nReturn : vector< witness_api_obj > an array of `count` witnesses sorted by total votes after witness `from` with at most `limit' results.\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.lookup_account_names ( const vector<string>& account_names )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"lookup_account_names\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get a list of accounts by name. This function has semantics identical to @ref get_objects\n\nParams : const vector<string>& account_names Names of the accounts to retrieve\n\nReturn : vector<optional<account_api_obj>> The accounts holding the provided names\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.lookup_accounts ( const string& lower_bound_name, uint32_t limit )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"lookup_accounts\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get names and IDs for registered accounts\n\nParams : const string& lower_bound_name Lower bound of the first name to return\n uint32_t limit Maximum number of results to return -- must not exceed 1000\n\nReturn : set<string> Map of account names to corresponding IDs\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.lookup_witness_accounts ( const string& lower_bound_name, uint32_t limit )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"lookup_witness_accounts\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : Get names and IDs for registered witnesses\n\nParams : const string& lower_bound_name Lower bound of the first name to return, \nuint32_t limit Maximum number of results to return -- must not exceed 1000\n\nReturn : set<account_name_type> Map of witness names to corresponding IDs\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.verify_account_authority ( const string& name_or_id, const flat_set<public_key_type>& signers )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"verify_account_authority\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const string& name_or_id, const flat_set<public_key_type>& signers\n\nReturn : bool true if the signers have enough authority to authorize an account\n\n"
               },
               "response": []
            },
            {
               "name": "condenser_api.verify_authority ( const signed_transaction& trx )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"verify_authority\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : const signed_transaction& trx\n\nReturn : bool true of the @ref trx has all of the required signatures, otherwise throws an exception\n\n"
               },
               "response": []
            },
            {
               "name": "tags_api.get_discussion ( comment_id_type, uint32_t truncate_body = 0 )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_discussion\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : comment_id_type, uint32_t truncate_body = 0\n\nReturn : discussion\n\n"
               },
               "response": []
            },
            {
               "name": "witness_api.get_account_bandwidth ( string account, witness::bandwidth_type type )",
               "request": {
                  "method": "POST",
                  "header": [
                     {
                        "key": "Content-Type",
                        "value": "application/json"
                     }
                  ],
                  "body": {
                     "mode": "raw",
                     "raw": "{\"jsonrpc\" : \"2.0\", \"method\" : \"get_account_bandwidth\", \"params\" : [], \"id\": \"323\"}"
                  },
                  "url": {
                     "raw": "https://api.steemit.com",
                     "protocol": "https",
                     "host": [
                        "api.steemit.com"
                     ],
                     "port": ""
                  },
                  "description": "Description : \n\nParams : string account, witness::bandwidth_type type\n\nReturn : optional< account_bandwidth_api_obj >\n\n"
               },
               "response": []
            }
         ]
      }
   ]
}